var documenterSearchIndex = {"docs":
[{"location":"Optimization/#Cycle-Optimization","page":"Cycle Optimization","title":"Cycle Optimization","text":"","category":"section"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"So we have seen before on how to model basic cycles. But now we would like to know what would be the most optimum parameters to model a cycle.","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"The cycles created can be wrapped with functions and sent to optimization routines. Most of the optimal solutions of purely theromodynamic systems lie at the boundary of constrains or saturation curve. Hence the initial box of constrain chosen has to be robust enough to have decent volume of feasible solutions.","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"The most trusted algorithms for thermodynamic optimizations are Genetic Algorithms. It is well integrated with Optimization.jl and Metaheuristics.jl","category":"page"},{"location":"Optimization/#Example","page":"Cycle Optimization","title":"Example","text":"","category":"section"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"Here we take the case of an Organic Rankine cycle, we would like to know what are the most optimal parameters to get the most efficient cycle. ","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"(Image: Simple_ORC_with_basic_glide) ","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"A simple ORC contains a pump, evaporator, expander and condensor.","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"Here we use the condensor and evaporators such that the inlet and outlet temperature of the heat transfer fluids are known. ","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"This puts an additional constraint on the heat exchanges, i.e. the temperature profile of the heat transfer fluid and the working fluid should not cross each other. In other words we want to know what would be the most efficient ORC that fits two temperature profile bounds.","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"(Image: Simple_ORC_optimization)","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"So we first describe our cycle:","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"using CarnotCycles, ModelingToolkit, Clapeyron, SteadyStateDiffEq\nfluid = cPR([\"isopentane\",\"isobutane\"],idealmodel = ReidIdeal)\nload_fluid(fluid)\n@independent_variables t","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"Choose the components","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"@named source = MassSource()\n@named pump = Pump()\n@named evaporator = SimpleEvaporatorGlide(N = 10)  # N is the number of interal discretization points\n@named turbine = IsentropicExpander()\n@named condensor = SimpleCondensorGlide(N = 10)\n@named sink = MassSink()\n\nsystems = [source,pump,evaporator,turbine,condensor,sink]\n\neqs = [\n    connect(source.port,pump.inport)\n    connect(pump.outport,evaporator.inport)\n    connect(evaporator.outport,turbine.inport)\n    connect(turbine.outport,condensor.inport)\n    connect(condensor.outport,sink.port)\n]\n\n@named system = ODESystem(eqs,t,systems = systems)\n@time sys = structural_simplify(system)","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"Now we have define our cycle we can make a function to pass to the optimizer.","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"We would like to know the optimal pressure at source, mass fraction, pressure ratio, super heat temperature and sub cool temperature, for given set of parameters.","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"function ORC(x,p)\ntry\n    T_htf_cond = p[4];\n    T_htf_evap = p[3];\n    @assert T_htf_evap[1] > T_htf_evap[2]\n    @assert T_htf_cond[1] < T_htf_cond[2]\n    z_source = CarnotCycles.mass_to_moles(fluid,x[2],p[5])\n    T_source = CarnotCycles.Bubble_temperature(fluid,x[1],z_source) - x[5]\n    h_source = CarnotCycles.pt_enthalpy(fluid,x[1],T_source,z_source)\n    u0 = []\n    para = [source.source_pressure => x[1], source.source_enthalpy => h_source, source.source_mdot => p[5], source.source_x => x[2],\n        pump.πc => x[3], pump.η => p[2],\n        evaporator.ΔT_sh => x[4], evaporator.T_htf_in => T_htf_evap[1], evaporator.T_htf_out => T_htf_evap[2],\n        turbine.η => p[1], turbine.πc => pump.πc,\n        condensor.T_htf_in => T_htf_cond[1], condensor.T_htf_out => T_htf_cond[2], condensor.ΔT_sc => x[5]\n        ]\n\n    prob = SteadyStateProblem(sys,u0,para)\n    sol =solve(prob)\n    \n    # Check inlet of pump to be liquid\n    try\n        sol[pump.LiquidPhase]\n    catch\n        return 1e4\n    end\n\n    # Check if the temperature profiles in the evaporator and condenser are feasible\n\n    if sol[evaporator.is_feas] == false\n        return 1e4\n    end\n\n    if sol[condensor.is_feas] == false\n        return 1e4\n    end\n    return @show (sol[turbine.P] + sol[pump.P])/sol[evaporator.Qdot]\ncatch\n    return 1e4\nend\nend","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"NOTE","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"There needs to be exceptional handling for optimzation as sometimes the internal function evaluations of Clapeyron.jl or CoolProp.jl can throw errors, the exception handeling allows us to surpass it. For the cases with an exception we return a penalty value. ","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"Solving the optimization problem:","category":"page"},{"location":"Optimization/","page":"Cycle Optimization","title":"Cycle Optimization","text":"x0 = [101325*5,0.5,3,3,3]\npara = [0.7,0.7,(390,380),(290,300),20]\nlb = [101325,0.01,2,2,2]\nub = [101325*5,0.99,15,10,10]\n\nusing Optimization, OptimizationMetaheuristics\n\nfopt = OptimizationFunction(ORC)\nprob_opt = OptimizationProblem(fopt,x0,para,lb=lb,ub=ub)\nsol = solve(prob_opt, PSO(N = 100), maxiters = 100000, maxtime = 300.0)","category":"page"},{"location":"Cycles/#Cycle-Modeling","page":"Cycles Modeling","title":"Cycle Modeling","text":"","category":"section"},{"location":"Cycles/#Carnot-Cycle","page":"Cycles Modeling","title":"Carnot Cycle","text":"","category":"section"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"As the name of the package is CarnotCycles.jl we would like to show the first as the cycle proposed by Carnot called the Carnot Cycle. ","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"His cycle follows a isothermal exapansion of the gas, isentropic expansion, isothermal compression , and finally isentropic compression.","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"So we will use Clapeyron.jl for our gas model. Here we choose the gas to be Argon.","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"using CarnotCycles, ModelingToolkit, Clapeyron, SteadyStateDiffEq\n\nfluid = cPR([\"Argon\"],idealmodel = ReidIdeal)\nload_fluid(fluid)\n@independent_variables t","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"The we choose our processes as components and connect them. A source and sink is recommended to initiate and close the cycle.","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"@named source = MassSource()\n@named isothermal_comp =  IsothermalCompressor()\n@named isentropic_comp = IsentropicCompressor()\n@named isothermal_exp = IsothermalExpander()\n@named isentropic_exp = IsentropicExpander()\n@named sink = MassSink()\n\neqs = [\n    connect(source.port,isothermal_exp.inport)\n    connect(isothermal_exp.outport,isentropic_exp.inport)\n    connect(isentropic_exp.outport,isothermal_comp.inport)\n    connect(isothermal_comp.outport,isentropic_comp.inport)\n    connect(isentropic_comp.outport,sink.port)\n]\n\nsystems = [source,isothermal_comp,isothermal_exp,isentropic_comp,isentropic_exp,sink]\n\n@named CarnotCycle = ODESystem(eqs, t, systems=systems)\n@time sys = structural_simplify(CarnotCycle)","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"Now we state the point at source","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"πc_1 = 5; πc_2 = 6\nsource_mdot = 30 #g/s\nz_source = CarnotCycles.mass_to_moles(fluid,1,source_mdot)\nsource_temp = 600; source_pressure = 101325*30; source_h = CarnotCycles.pt_enthalpy(fluid,source_pressure,source_temp,z_source)\n\npara = [\n    source.source_enthalpy => source_h, source.source_mdot => source_mdot, source.source_x => 1, source.source_pressure => source_pressure,\n    isothermal_exp.πc => πc_1,\n    isentropic_exp.πc => πc_2, isentropic_exp.η => 1,\n    isothermal_comp.πc => πc_1,\n    isentropic_comp.πc => πc_2, isentropic_comp.η=>1\n]\nu0 = []\nprob = SteadyStateProblem(sys,u0,para)\nsol = solve(prob)","category":"page"},{"location":"Cycles/#Vapour-Compression-Cycle","page":"Cycles Modeling","title":"Vapour Compression Cycle","text":"","category":"section"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"(Image: Simple_VCC) ","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"We first start by loading the adequate packages and the fluid:","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"using CarnotCycles, CoolProp, ModelingToolkit, SteadyStateDiffEq\n@independent_variables t\nload_fluid(\"R134A\")","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"Then we define the source thermodynamic state -  the starting point of the cycle.","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"ΔT_sh = 5\np_ = 101325*5; T_ = PropsSI(\"T\",\"Q\",1,\"P\",p_,\"R134A\") + ΔT_sh\nh_ = PropsSI(\"H\",\"T\",T_,\"P\",p_,\"R134A\")","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"The we choose the adequate components for the vapour compression cycle:","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"@named source = MassSource()\n@named compressor = CarnotCycles.IsentropicCompressor()\n@named condensor = CarnotCycles.SimpleCondensor()\n@named valve = Valve()\n@named evaporator = SimpleEvaporator()\n@named sink = MassSink()","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"Then we connect them in necessary order:","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"systems = [source, compressor,condensor,valve,evaporator,sink]\neqs = [\n        connect(source.port,compressor.inport)\n        connect(compressor.outport,condensor.inport)\n        connect(condensor.outport,valve.inport)\n        connect(valve.outport,evaporator.inport)\n        connect(evaporator.outport,sink.port)\n]\n\n@named VCC = ODESystem(eqs,t,systems = systems)\nsys = structural_simplify(VCC)","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"Then we choose the parameters of the system:","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"para = [\n    source.source_pressure => p_, source.source_enthalpy => h_, source.source_mdot => 0.02, \n    compressor.πc => 3, compressor.η => 0.7,\n    condensor.ΔT_sc => 3,\n    valve.πc => compressor.πc,\n    evaporator.ΔT_sh => ΔT_sh, \n]","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"Then we proceed to solve the problem:","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"u0 = []\nprob = SteadyStateProblem(sys,u0,para)\nsol = solve(prob)","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"To get the Coeffecient of Performace of the cycle: ","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"julia> COP = sol[condensor.Qdot]/sol[compressor.P]\n-5.096928812859646","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"NOTE","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"Energy given to the fluid is +ve while given by the fluid is -ve. Hence the COP is negative","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"","category":"page"},{"location":"Cycles/#Plotting-the-Cycle","page":"Cycles Modeling","title":"Plotting the Cycle","text":"","category":"section"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"To model a cycle with Claperyon.jl only change the fluid Example: ","category":"page"},{"location":"Cycles/","page":"Cycles Modeling","title":"Cycles Modeling","text":"using CarnotCycles, ModelingToolkit, SteadyStateDiffEq, Clapeyron\n@independent_variables t\nmodel = cPR([\"Pentane\",\"toluene\"],idealmodel = ReidIdeal)\nload_fluid(model)","category":"page"},{"location":"Guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"Guide/#Loading-Fluids","page":"Guide","title":"Loading Fluids","text":"","category":"section"},{"location":"Guide/","page":"Guide","title":"Guide","text":"To load a Clapyeron.jl backend fluid model do the following: ","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"using CarnotCycles, Clapeyron\nfluid = cPR([\"isopentane\",\"isobutane\"],idealmodel = ReidIdeal)\nload_fluid(fluid)","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"As of now we support Clapeyon mixtures of up to 2 components.","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"For CoolProp.jl backend fluid properties simply pass the fluid name as a string as follows:","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"using CarnotCycles, CoolProp\nload_fluid(\"R601\")","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"NOTE","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"Once the fluid model is chosen through the simulation the underlying components are chosen based on the fluid model.","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"","category":"page"},{"location":"Guide/#Loading-Components","page":"Guide","title":"Loading Components","text":"","category":"section"},{"location":"Guide/","page":"Guide","title":"Guide","text":"A cycle consists of various components through which the fluid passes. These components are modeled using ModelingToolkit.jl \"Acausal Modeling\".","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"To load any component follow ModelingToolkit.jl's @named framework. For example: ","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"using ModelingToolkit, CoolProp, CarnotCycles\n\n@named evaporator = SimpleEvaporator()","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"For detailed understanding of the acausal framework following the documentation of ModelingToolkit.jl.","category":"page"},{"location":"Guide/#Port-Variables","page":"Guide","title":"Port Variables","text":"","category":"section"},{"location":"Guide/","page":"Guide","title":"Guide","text":"Every component has atleast two fluid ports inport and outport (except MassSource and MassSink which has only one, port). ","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"For a fluid port based over CoolProp backend we have the ports variables to be h, p and mdot (enthalpy, pressure, and mass flow rate). ","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"For a fluid port based over Clapeyron backend we have the ports variables to be h, p, mdot, and x (enthalpy, pressure,mass flow rate, and mass fraction of first fluid).","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"NOTE","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"The units for Coolprop fluid for mass flow rate is kg/s while for Clapeyron is g/s. ","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"Clapeyron works with total values i.e. total enthalpy (J), entropy (J/K) etc.. while CoolProp works with specific values i.e. specific enthalpy (J/kg), specific entropy (J/kg/K)","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"","category":"page"},{"location":"Guide/#Plotting","page":"Guide","title":"Plotting","text":"","category":"section"},{"location":"Guide/#Making-new-components","page":"Guide","title":"Making new components","text":"","category":"section"},{"location":"Guide/","page":"Guide","title":"Guide","text":"It is based on acausal framework so users can add their own components for simulation.","category":"page"},{"location":"Guide/","page":"Guide","title":"Guide","text":"function MyComp(;name,...)\n    @named inport = CoolantPort()\n    @named outport = CoolantPort()\n    para = @parameters begin\n        MyParas ...\n    end\n    vars = @variables begin\n        MyVars ...\n     end\n   eqs = [  outport.mdot ~ abs(inport.mdot) \n            outport.p ~ eq1 ...\n            outport.h ~ eq2 ...\n            ..\n   ]\n   compose(ODESystem(eqs, t, vars, para;name), inport, outport)\nend","category":"page"},{"location":"reference/#References","page":"References","title":"References","text":"","category":"section"},{"location":"reference/#Contents","page":"References","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"References","title":"Index","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Modules = [CarnotCycles]","category":"page"},{"location":"reference/#CarnotCycles.AmbientNode-Tuple{}","page":"References","title":"CarnotCycles.AmbientNode","text":"Ambient temperature node.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.Compute_cycle_error-NTuple{4, Any}","page":"References","title":"CarnotCycles.Compute_cycle_error","text":"Compute_cycle_error(p_source,h_source,p_sink,h_sink;reltol = 1e-8)     * Computes cycle end point mismatch in states - between sink and source.\n\nreturns `nothing`\n\nShows error incase of mismatch\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.Compute_cycle_error-Tuple{SciMLBase.ODESolution, Vector{ModelingToolkit.ODESystem}}","page":"References","title":"CarnotCycles.Compute_cycle_error","text":"Compute_cycle_error(sol::ODESolution,system::Vector{ODESystem};reltol = 1e-8)\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.CoolPropGasPhaseCheck-Tuple{AbstractString, Any, Any}","page":"References","title":"CarnotCycles.CoolPropGasPhaseCheck","text":"CoolPropGasPhaseCheck Checks if state point is Gas. Passes through an assert statement. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.CoolPropLiquidPhaseCheck-Tuple{AbstractString, Any, Any}","page":"References","title":"CarnotCycles.CoolPropLiquidPhaseCheck","text":"CoolPropLiquidPhaseCheck Checks if state point is Liquid. Passes through an assert statement. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.CoolantPort-Tuple{}","page":"References","title":"CarnotCycles.CoolantPort","text":"Makes node for port connections. This node is Pressure,Enthalpy, Mass flow rate and mass fraction of first fluid (incase of Clapyeron Mixture).\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.HeatPort-Tuple{}","page":"References","title":"CarnotCycles.HeatPort","text":"HeatPort: Variables are Q, tin, Tout\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsentropicCompression-NTuple{5, Any}","page":"References","title":"CarnotCycles.IsentropicCompression","text":"IsentropicCompression(πc, h_in, p_in,fluid,η)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nη    : Isentropic Efficiency\nreturns : Outlet enthalpy after isentropic compression\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsentropicCompressionClapeyron-Tuple{Any, Any, Any, Any, Clapeyron.EoSModel, Any}","page":"References","title":"CarnotCycles.IsentropicCompressionClapeyron","text":"IsentropicCompressionClapeyron(πc, h_in, p_in,z,fluid,η)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nz    : Moles\nη    : Isentropic Efficiency\nreturns : Outlet enthalpy after isentropic compression\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsentropicCompressor-Tuple{}","page":"References","title":"CarnotCycles.IsentropicCompressor","text":"IsentropicCompressor(;name,fluid=set_fluid)\n\nA compressor with isentropic Effeciency and pressure ratio as a parameter is chosen. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsentropicExpander-Tuple{}","page":"References","title":"CarnotCycles.IsentropicExpander","text":"IsentropicExpander(;name,fluid=set_fluid) \n\nA expander with isentropic Effeciency and pressure ratio as a parameter is chosen.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsentropicExpansion-NTuple{5, Any}","page":"References","title":"CarnotCycles.IsentropicExpansion","text":"IsentropicExpansion(πc, h_in, p_in,fluid,η)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nη    : Isentropic Efficiency\nreturns : Outlet enthalpy after isentropic expansion\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsentropicExpansionClapeyron-Tuple{Any, Any, Any, Any, Clapeyron.EoSModel, Any}","page":"References","title":"CarnotCycles.IsentropicExpansionClapeyron","text":"IsentropicExpansionClapeyron(πc, h_in, p_in,z,fluid,η)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nz    : Moles\nη    : Isentropic Efficiency\nreturns : Outlet enthalpy after isentropic expansion\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsobaricHeatSink-Tuple{}","page":"References","title":"CarnotCycles.IsobaricHeatSink","text":"IsobaricHeatSink(;name,fluid = set_fluid)\n\nA heat sink independent of temperature and no pressure drop\n\nParameters: \nQ_dot     : Total heat supplied\nLocal Variables:\nP      : Power  \ns_in   : Inlet Entropy\np_in   : Inlet Pressure\nT_in   : Inlet Temperature\nh_in   : Inlet Enthalpy\nρ_in   : Inlet Density\ns_out  : Outlet Entropy\np_out  : Outlet Pressure\nT_out  : Outlet Temperature\nh_out : Outlet Enthalpy\nρ_out : Outlet Density\nPort Variables:\ninport         : p and h\noutport        : p and h\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsobaricHeatSource-Tuple{}","page":"References","title":"CarnotCycles.IsobaricHeatSource","text":"IsobaricHeatSource(;name,fluid = set_fluid)\n\nA heat source independent of temperature and no pressure drop\n\nParameters: \nQ_dot     : Total heat supplied\nLocal Variables:\nP      : Power  \ns_in   : Inlet Entropy\np_in   : Inlet Pressure\nT_in   : Inlet Temperature\nh_in   : Inlet Enthalpy\nρ_in   : Inlet Density\ns_out  : Outlet Entropy\np_out  : Outlet Pressure\nT_out  : Outlet Temperature\nh_out : Outlet Enthalpy\nρ_out : Outlet Density\nPort Variables:\ninport         : p and h\noutport        : p and h\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsochoricCompression-NTuple{4, Any}","page":"References","title":"CarnotCycles.IsochoricCompression","text":"IsochoricCompression(πc, h_in, p_in,fluid)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nOutput -> Outlet enthalpy after isochoric compression\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsochoricCompressionClapeyron-Tuple{Any, Any, Any, Array, Clapeyron.EoSModel}","page":"References","title":"CarnotCycles.IsochoricCompressionClapeyron","text":"IsochoricCompressionClapeyron(πc, h_in, p_in,z::Array,fluid::EoSModel)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nz    : Moles\nfluid: Fluid\nOutput -> Outlet enthalpy after isochoric compression\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsochoricCompressor-Tuple{}","page":"References","title":"CarnotCycles.IsochoricCompressor","text":"IsochoricCompressor(;name,fluid = set_fluid)\n\nA compressor with pressure ratio as a parameter is chosen. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsochoricExpansion-NTuple{4, Any}","page":"References","title":"CarnotCycles.IsochoricExpansion","text":"IsochoricExpansion(πc, h_in, p_in,fluid)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nOutput -> Outlet enthalpy after isochoric expansion\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsochoricExpansionClapeyron-Tuple{Any, Any, Any, Array, Clapeyron.EoSModel}","page":"References","title":"CarnotCycles.IsochoricExpansionClapeyron","text":"IsochoricExpansionClapeyron(πc, h_in, p_in,z::Array,fluid::EoSModel)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nz    : Moles\nfluid: Fluid\nOutput -> Outlet enthalpy after isochoric expansion\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsothermalCompression-NTuple{4, Any}","page":"References","title":"CarnotCycles.IsothermalCompression","text":"IsothermalCompression(πc, h_in, p_in,fluid)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nOutput -> Outlet enthalpy after Isothermal Compression\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsothermalCompressionClapeyron-Tuple{Any, Any, Any, Any, Clapeyron.EoSModel}","page":"References","title":"CarnotCycles.IsothermalCompressionClapeyron","text":"IsothermalCompressionClapeyron(πc, h_in, p_in,z,fluid::EoSModel)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nz    : Moles\nfluid: Fluid\nOutput -> Outlet enthalpy after Isothermal compression\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsothermalCompressor-Tuple{}","page":"References","title":"CarnotCycles.IsothermalCompressor","text":"IsothermalCompressor(;name,fluid = set_fluid)\n\nA compressor with pressure ratio as a parameter is chosen. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsothermalExpansion-NTuple{4, Any}","page":"References","title":"CarnotCycles.IsothermalExpansion","text":"IsothermalExpansion(πc, h_in, p_in,fluid)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nfluid: Fluid\nOutput -> Outlet enthalpy after Isothermal Expansion\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.IsothermalExpansionClapeyron-Tuple{Any, Any, Any, Any, Clapeyron.EoSModel}","page":"References","title":"CarnotCycles.IsothermalExpansionClapeyron","text":"IsothermalExpansionClapeyron(πc, h_in, p_in,z,fluid::EoSModel)\n\nArguments:\nπc   : Pressure Ratio\nh_in : Inlet Enthalpy\np_in : Inlet Pressure\nz    : Moles\nfluid: Fluid\nOutput -> Outlet enthalpy after Isothermal expansion\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.MassSink-Tuple{}","page":"References","title":"CarnotCycles.MassSink","text":"MassSink` -  Sets the final port input values to the variables. Use as a sink for the simulation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.MassSource-Tuple{}","page":"References","title":"CarnotCycles.MassSource","text":"MassSource -  Initilizes cycle start point. Requires initial enthalpy,pressure and Mass flow rate if CoolProp fluid is used else uses enthalpy,pressure, Mass flow rate, and mass fraction of first fluid if Clapeyron Fluid is used.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.PT_IsentropicExpansionClapeyron-Tuple{Clapeyron.EoSModel, Vararg{Any, 5}}","page":"References","title":"CarnotCycles.PT_IsentropicExpansionClapeyron","text":"PT_IsentropicExpansionClapeyron(model::EoSModel,T_in,p_in,z,πc,η)\n\nArguments:\nπc   : Pressure Ratio\nT_in : Inlet Temperature\np_in : Inlet Pressure\nfluid: Fluid\nz    : Moles\nη    : Isentropic Efficiency\nreturns : Outlet Temperature after isentropic expansion\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.PackedBed-Tuple{}","page":"References","title":"CarnotCycles.PackedBed","text":"A simple Schuman Packed Bed model. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.PhaseIdentificationNumeric-Tuple{Clapeyron.EoSModel, Any, Any, Any}","page":"References","title":"CarnotCycles.PhaseIdentificationNumeric","text":"PhaseIdentificationNumeric(model::EoSModel,p,h,z)\n\nFor identification of phase of the fluid when using Clapeyron.\n\nreturns 0 for liquid, 1 for vapour, 2 for Two phase\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.PowerPort-Tuple{}","page":"References","title":"CarnotCycles.PowerPort","text":"\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.Pump-Tuple{}","page":"References","title":"CarnotCycles.Pump","text":"Pump(;name,fluid = set_fluid)\n\nA pump with isentropic Efficiency and pressure ratio as parameter is chosen. Ensure that inlet to the pump is liquid by checking the internal variable LiquidPhase.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.RefPort-Tuple{}","page":"References","title":"CarnotCycles.RefPort","text":"Makes node for port connections. This node is Pressure,Temperature, Mass flow rate and mass fraction of first fluid (incase of Clapyeron Mixture). Use this when the two-phase details of the fluid are not necessary.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.SimpleCondensor-Tuple{}","page":"References","title":"CarnotCycles.SimpleCondensor","text":"SimpleCondensor(;name,fluid=set_fluid)\n\nCondenses the fluid to ΔT_sc below the saturation point. If the fluid is above the critical point then cools it to ΔT_sc below the critical temperature. No pressure drop is considered. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.SimpleCondensorGlide-Tuple{}","page":"References","title":"CarnotCycles.SimpleCondensorGlide","text":"A simple condensor where the HTF inlet and outlet temperature is passed as a parameter. Has a variable is_feas which checks if the fluid passed through violates temperature profile condition or not.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.SimpleEvaporator-Tuple{}","page":"References","title":"CarnotCycles.SimpleEvaporator","text":"SimpleCondensor(;name,fluid=set_fluid)\n\nEvaporates the fluid to ΔT_sh above the saturation point. If the fluid is above the critical point then cools it to ΔT_sh above the critical temperature. No pressure drop is considered. \n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.SimpleEvaporatorGlide-Tuple{}","page":"References","title":"CarnotCycles.SimpleEvaporatorGlide","text":"A simple evaporator where the HTF inlet and outlet temperature is passed as a parameter. Has a variable is_feas which checks if the fluid passed through violates temperature profile condition or not.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.StoragePort-Tuple{}","page":"References","title":"CarnotCycles.StoragePort","text":"Storage port that connect the storage HTF to the thermal storage. Contains Temperature and mass flow rate of the HTF.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.Valve-Tuple{}","page":"References","title":"CarnotCycles.Valve","text":"Valve(;name,fluid)\n\nIsenthalpic Valve with pressure ratio as a parameter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.is_feasible_condensor-Tuple{AbstractVector, AbstractVector}","page":"References","title":"CarnotCycles.is_feasible_condensor","text":"This checks if the temperature profile inside the condensor violates physics or not.\n\ni.e. It will see for a condensor that if the temperature of the working fluid was always more than the temperature of the heat transfer fluid.\nif it is feasible then it will return `true` else `false`\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.is_feasible_evaporator-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T","page":"References","title":"CarnotCycles.is_feasible_evaporator","text":"This checks if the temperature profile inside the evaporator violates physics or not.\n\ni.e. It will see for a evaporator that if the temperature of the working fluid was always less than the temperature of the heat transfer fluid.\nif it is feasible then it will return `true` else `false`\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.load_fluid-Tuple{AbstractString}","page":"References","title":"CarnotCycles.load_fluid","text":"load_fluid(x::AbstractString) - fixes fluid for simulation through components using CoolProp as backend.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.load_fluid-Tuple{Clapeyron.EoSModel}","page":"References","title":"CarnotCycles.load_fluid","text":"load_fluid(x::Clapeyron.EoSModel) - fixes fluid for simulation through components using Clapeyron as backend\n\n\n\n\n\n","category":"method"},{"location":"reference/#CarnotCycles.mass_to_moles-Tuple{Clapeyron.EoSModel, Any, Any}","page":"References","title":"CarnotCycles.mass_to_moles","text":"mass_to_moles(model::EoSModel,x,mass) : convert mass of fluid to number of moles based on the composition of 1st fluid by mass x\n\n\n\n\n\n","category":"method"},{"location":"#CarnotCycles.jl","page":"Home","title":"CarnotCycles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation of CarnotCycles.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The goal of this package is to have a basic acausal framework to model thermodynamic cycles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package combines ModelingToolkit.jl with CoolProp.jl and Clapyeron.jl. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The themodynamic components are modelled as steady state components. All the components are based on the laws of thermodynamics.","category":"page"}]
}
